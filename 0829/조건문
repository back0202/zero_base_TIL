조건문
if(표현식){
    표현식이 참으로 평가될때, 실행되는 문장들의 모음
}



if (true){
	console.log('항상 실행');
}

if (false) {
	 console.log('항상실행되지 않는다');
}


블럭 코드가 한줄이면, 중괄호 생략가능

if (true) console.log('항상실행');

if (false) console.log('항상실행되지 않음');




블린자료형이 아니지만 블린으로 취급되는것이있다. 자바스크립트 자료형이 동적인것과 연관이 있다

블린형의 flase는 아니지만 거짓으로 평가 될떄 이것을
falsy  폴시한값이라 한다
false, 0, '', null, undefined, NaN

표현식이 참으로 평가될때
Truethy   투루시
Falsy의 반대, 제외한 값들은 다: true, 37, 'Mark', {}, []     널 언디파인드가 아닌 모든객체들{} [], 숫자 마이너스도 투루시


if만으로 표현하기 힘들기 떄문에 if뒤에 else{}을 이용해서
if의 표현식이 참일때를 말고 아닐떄 실행할수 있는 블럭 설정가능

const n = 37;
if (n > 0) {
	console.log('n이 0 보다 큰 경우');
} else {
	console.log('n이 0 보다 크지 않은 경우');
}

문장이 하나일경우, 중괄호 없이 사용가능
if (n > 0) console.log('n이 0 보다 큰 경우');
else console.log('n이 0 보다 크지 않은 경우');


else if{}   사용하면 여러 조건에 해당하는 것을 설정가능

const n = 15;

if (n % 3 ===0) {
	console.log('n은 3의 배수입니다);
} else if (n % 5 ===0) {
	console.log('n은 5의 배수입니다.');
}else {                                                 이 else를 안써도 됨
	console.log(''\n은 3의 배수도 아니고, 5의 배수도 아닙니다)'
}

n이 3의 배수이면서, 5의 배수이면. 좁은 영역을 앞에 써준다

if (n % 3 === 0 && n % 5 ===0) {
	console.log('n은 15의 배수입니다');
} else if (n % 3 ===0) {
	console.log('n은 3의 배수입니다');
} else if (n % 5 ===0) {
	console.log('n은 5의 배수입니다.');
} else {    
	console.log('n은 3의 배수도 아니고, 5의 배수도 아닙니다)'
}


여러번 반복되는것을 변수나 상수에 넣는다
const mulTipleOfThree = (n % 3 ===0);     일종의 블린값
const mulTipleOfFive = (n % 5 ===0);

if (mulTipleOfThree === mulTipleOfFive) {
	console.log('n은 15의 배수입니다');
} else if (const mulTipleOfThree) {
	console.log('n은 3의 배수입니다');
} else if (mulTipleOfFive) {
	console.log('n은 5의 배수입니다.');
} else {    
	console.log(''\n은 3의 배수도 아니고, 5의 배수도 아닙니다)'
}

중첩을 이용해서 표현가능
if (mulTipleOfThree === mulTipleOfFive) {
	console.log('n은 15의 배수입니다');
} else {
	if (const mulTipleOfThree) {
	console.log('n은 3의 배수입니다');
} else if (mulTipleOfFive) {
	console.log('n은 5의 배수입니다.');
} else {    
	console.log(''\n은 3의 배수도 아니고, 5의 배수도 아닙니다)'
}
}





논리 연산자를 이용한 조건문 평가      &엔퍼센트   |버티컬바
&& 엔드연산자
||    or연산자
! not 연산자      표현식 앞에 !을 붙이면 반대를 나타낸다
if의 표션식안에서 조건문을 평가하는 능력을 키워야한다


표현식 && 표현식
if (true && true) {
	console.log('2개모두 참이면 참');
}
if (true && false) {
	console.log('한개만 참이면 거짓');
}

표현식 || 표현식
if (true || true) {
	console.log('2개모두 참이면 참');
}
if (true && false) {
	console.log('한개만 참이면 참');
}

!표현식
if (!true) {
	console.log('참이면 거짓');
}




논리연산자를 이용한 조건부 실행

&&이면 앞에가 거짓이면 뒤에건 실행이 안된다
왜? 둘다 참이여야 하기 떄문에 앞이 거짓이면 어차피 거짓이라 뒤에건 실행할 필요가 없어서

||이면 앞이 참이면 뒤에건 실행안됨
왜? 하나만 참이면 참이라 앞이 실행되면 참이라 뒤에거 실행할필요가 없음
n = 5;
n % 5 ===0 || console.log()    앞이 참이라 뒤에거 콘솔 실행안됨
 
n=6;
n % 5 ===0 || console.log()   앞이 거짓이라 뒤에 콘솔 실행




삼항 연산자를 이용한 조건부 실행
실행한 결과를 바로 어디에 할당하면 좋다
조건 ? 조건이 참이면 실행되는 표현식 : 조건이 거짓이면 실행되는 표현식
중괄호 {}를 사용할수 없는 문법이기 떄문에 하나의 표현식만 가능합니다
let n = 5;
console.log(n % 5 ===0 ? '5의배수입니다' : '5의배수가 아닙니다')     

표현식의 결과를 변수에 할당할수 있다
const message = n % 5 ===0 ? '5의배수입니다' : '5의배수가 아닙니다'
console.log(message);


switch를 이용한 조건문
switch는 if와 달리 참인지 거짓인지 보다는 어떤값인지 체크해서 맞으면 실행되는 블럭들을 설정
switch 뒤 괄호 안에 있는 값이 무엇인지 중괄호 안에 있는 코드들을 비교해서 실행
이중에 default: 뒤에 있는 문장은 항상 참이어서 실행되는 블럭
문장이 한줄이라 중괄호는 생략

let n =5;
switch (n){
	default: {
	console.log(n);
}
}


let n =5;
switch (n){
	default: 
	console.log(n);
}


n이 5로 나누었을떄 나머지가 0 인 경우에 실행되는 블럭
case 비교할값 : 을 이용해서 맞으면 실행
case 0 : 과 default: 둘다 실행 왜? default는 항상 실행이라
swtich (n % 5){
	case 0: {
	console.log('5의 배수입니다.');
}
	default: 
	console.log(n);
}
case도 중괄호 생략가능 한줄이라
default값 안나오고 싶으면 case애 break추가

swtich (n % 5){
	case 0: {
	console.log('5의 배수입니다.');
	break;
}
	default: 
	console.log(n);
}

break과 case 순서를 조정하여 원하는 코드를 만들어 낼수있따.

n = 6;
switch (n % 5) {
	case 0: {
	console.log('5의 배수입니다');
	break;
} case 1:
case 2:
case 3:
case4:
	console.log('5의 배수가 아닙니다');
	default:
	console.log(n);
}
결과는 5의 배수가 아닙니다와 6이 나옴

if문과 switch문 중에 적절히 잘사용 해라
