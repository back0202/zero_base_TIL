slice() 추출할 인덱스 번호, 없으면 전부다. 복사로 사용하는듯


재귀함수
function solution(n){
    function DFS(L){
        if(L==0) return;
        else{
            DFS(L-1);
            console.log(L);   
        }
    }
    DFS(n);
}

solution(3);



이진수 출력(재귀)
function solution(n){
    let answer="";
    function DFS(n){
         if(n===0) return;
         else{
             DFS(parseInt(n/2));
             answer+=String(n%2);
         }
    }
    DFS(n);
    return answer;
}

console.log(solution(11));



이진트리순회
function solution(n){
    let answer="";
    function DFS(v){
        if(v>7) return;
        else{
            answer+=(v+' ');
            DFS(v*2);
            DFS(v*2+1);
        }
    }
    DFS(n);
    return answer;
}

console.log(solution(1));



.splice(인덱스, 몇개삭제, 추가)
인덱스0이고 삭제도 0이면 인댁스 앞에 추가



부분집합구하기
function solution(n){
    let answer=[];
    let ch=Array.from({length:n+1}, ()=>0);
    function DFS(L){
        if(L===n+1){
            let tmp="";
            for(let i=1; i<=n; i++){
                if(ch[i]===1) tmp+=(i+" ");
            }
            if(tmp.length>0) answer.push(tmp.trim());
        }
        else{
            ch[L]=1;
            DFS(L+1);
            ch[L]=0;
            DFS(L+1);
        }
    }
    DFS(1);
    return answer;
}

console.log(solution(3));


참여한다 안한다는 체크뱅ㄹ


.trim() 문자열의 앞뒤 공백제거


합이같은 부분집합
function solution(arr){
    let answer="NO", flag=0;
    let total=arr.reduce((a, b)=>a+b, 0);
    let n=arr.length;
    function DFS(L, sum){
        if(flag) return;
        if(L===n){
            if((total-sum)===sum){
                answer="YES";
                flag=1;
            }
        }
        else{
            DFS(L+1, sum+arr[L]);
            DFS(L+1, sum);
        }
    }
    DFS(0, 0);
    return answer;
}

let arr=[1, 3, 5, 6, 7, 10];
console.log(solution(arr));



바둑이승차
function solution(c, arr){
    let answer=Number.MIN_SAFE_INTEGER;
    let n=arr.length;
    function DFS(L, sum){
        if(sum>c) return;
        if(L===n){
            answer=Math.max(answer, sum);
        }
        else{
            DFS(L+1, sum+arr[L]);
            DFS(L+1, sum);
        }                  
    }
    DFS(0, 0);
    return answer;
}

let arr=[81, 58, 42, 33, 61];
console.log(solution(259, arr));


최댜점수 구하기
function solution(m, ps, pt){         
    let answer=Number.MIN_SAFE_INTEGER;
    let n=ps.length;
    function DFS(L, sum, time){
        if(time>m) return;
        if(L===n){
            answer=Math.max(answer, sum);
        }
        else{
            DFS(L+1, sum+ps[L], time+pt[L]);
            DFS(L+1, sum, time);
        }   
    }

    DFS(0, 0, 0);
    return answer;
}

let ps=[10, 25, 15, 6, 7];
let pt=[5, 12, 8, 3, 4]
console.log(solution(20, ps, pt));


이진트리론 복작한거 풀면 오래 걸림 그래서
동적계획을 씀
for문과 차임점은 for은 값이 바뀔수록 for문이 늘어나는데 재귀는 안늘어남. 더 간단하는ㄴ 말




중복순열
function solution(n, m){
    let answer=[];
    let tmp=Array.from({length:m}, ()=>0);
    function DFS(L){
        if(L===m){
            answer.push(tmp.slice());
        }
        else{
            for(let i=1; i<=n; i++){
                tmp[L]=i;
                DFS(L+1);
            }
        }   
    }
    
    DFS(0);
    return answer;
}

console.log(solution(3, 2));



동전교환
function solution(m, arr){
    let answer=Number.MAX_SAFE_INTEGER;
    let n=arr.length;
    function DFS(L, sum){
        if(sum>m) return;
        if(L>=answer) return;
        if(sum===m){
            answer=Math.min(answer, L);
        }
        else{
            for(let i=0; i<n; i++){
                DFS(L+1, sum+arr[i]);
            }
        }
    }
    DFS(0, 0);
    return answer;
}

let arr=[1, 2, 5];
console.log(solution(15, arr));



