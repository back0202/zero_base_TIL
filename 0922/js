function User(name, age, ...skills){          나머지 매개변수는 항상 맨 마지막에 있어야함
    this.name = name
    this.age = age
    this.skills = skills
}

const user1 = new User('mike', 23, 'html', js)
console.log(user1)       {name: 'mike', age: 32, skills:['html', js]}

전개구문: 배열
let arr1 = [1, 2, 3] 
let result = [...arr1]    ...arr1은 1, 2, 3을 풀어서 쓴거
let result = [0, ...arr1, 6, ,7]   이렇게 중간에 쓴ㄴㄴ것도 가능


객체에도 가능
let user = {name: 'mike', age: 32} 
let user2 = {...user}

user2.name = 'tom'
console.log(user)     'mike'
console.log(user2)     'tom'    변화가 없다. 별개



let arr1 = [1, 2, 3] 
let arr2 = [4, 5, 6]
arr2.reverse().forEach((num) => {
    arr1.unshift(num)
}) 
console.log(arr1)         [4, 5, 6, 1, 2, 3]
이걸 전개구문으로 하면
arr1 = [...arr2, ...arr1] 



let user = {name: 'mike'}
let info = {age: 30}
let fe = ['js', 'react'] 
let lang = ['ko', 'en'] 
user.Object.assign({}, user, info, {
    skills: []
})
fe.forEach((name) => {
    user.skills.push(name)
})
lang.forEah((name) => {
    user.skills.push(name)
})
console.log(user)     근데 너무 기닌간 전개구문으로 하면 

user = {
    ...user,
    ...info,
    skills: [...fe, ...lang]
}
끝



어휘적 환경
여기      코드가 실행되면 js에서 실행된 변수들이 lexical환경에 올라간다.    one 초기화 x      사용불가        addOne:funtion 초기화   사용가능. 함수표현식은 이래 안됨
let one      이제여기만나면 아직할당은 안되어 있어서 indifined. addOne:function
one = 1               이제 one이 선언되었다                 
function addOne(num){            함수선언은 초기에 했기때문에 마지막 라인으로
    console.log(one + num)
}
addOne(5)                   함수실행되면 새로운 lexical환경이 만들어 진다. 이것에는 함수가 넘겨받은 
매개변수와 지역변수들이 저장된다.  num:5. 
함수가 호출되는 동얀함수에서받은 내부 렉시컬환경과 외부에서 받은전역 렉시컬환경 두개를 가진다
내부 렉시컬 환경은 외부렉시컬환경 참조를가진다
코드에서 변수를 찾을떄 내부에서 찾고 없으ㅕㄴ 내부 엾으면 전역렉시컬환경까지 범위를 넓혀서 찾는다
이 코드에서 one과 num은 내부랙시컬 환경에서 우선 찾는다 
num은 찾았지만 넘은 없다 이러면 외부로 넓혀서 찾게 된다 




function makeAdder(x){
    return function(y){
        return x+y
    }    
}
const add3 = makeAdder(3)
console.log(add3(2))
최초 실행시 makeAdder함수와 add3은 전역렉시컬 환경에 들어간다 add3은 초기화가 안된상태고 사용할수 없다. makeAdder:function  add3:초기화x
const add3 = makeAdder(3) 실행될떄 makeAdder가 실행 되고 makeAdder렉시컬 환경이 만들어 진다 x:3 
함수의 렉시컬 환경에는 넘겨받은 매개변수와 지역변수가 저장된다 
전역렉시컬환경에 있던 add3:초기화는 함수가 실해됐으니 return하는 함수가 된다 add3:function 
마지막줄 add3을 실행하면 함수가 실행되는데 이때도 익명함수렉시컬환경이 만들어 진다 y:2 
처음에는 익명함수렉시컬에서 x와 y를 찾는다 y는잇는데 x가 없으니 참조하는 외부렉시컬환경으로 가서 x를 찾는다
이것을 클러절
클러절은 함수와 그 함수의 렉시컬환경의 조함
함수가 생성될 당시 외부변수를 기억하고 생성된 이후에도 그변수에 걔속해서 접근 가능



function makeAdder(x){
    return function(y){
        return x+y
    }    
}
const add3 = makeAdder(3)
console.log(add3(2))
const add10 = makeAdder(10)   makeAdder10이 호출되지만
console.log(add10(5))
console.log(add3(1))            add3에는 변화가 없다
add10가 add3은 서로다른 환경을 가지고 있는거다




function makeCounter(){
    let num = 0
    return function (){
        return num++             내부함수 num이 외부함수 num에 접근
    }
}
let counter = makeCounter()
console.log(counter()) 0
console.log(couter()) 1
console.log(counter())2






setTimeOut  일정시간이 지난후 함수를 실행
setInterVel   일정시간간격으로 함수를 반복

function fn(){      
    console.log(3)
}
setTimeOut(fn, 3000)     3초후 로그 실행
fn일정시간이 지난후 실행하는 함후       3000은 3초
setTimeOut(function(){
    console.log(3)
}, 3000)
이렇게도 됨

function showName(name){
    console.log(name)
}
const tId =  setTimeOut(showName, 3000, 'mike')    함수 시간 인수
clearTimeOut(tId) 예정된 작업을 없앰
셋타임아웃은 타임 아이디를 반호나하는데 이것을 이용하면 취소 할수있음


setTimeOut(function(){
    console.log(2)
}, 0)    딜레이 타임을 0으로 줘도 바로 실행하지 안흔다 
console.log(1) 
먼저 1이 찍히고 다음 2가 찍힌다 
현재 실해중인 스크립트가 종료된후 스크립트 함수가 실행된다
기본적으로 브라우저는 4ms정도의 대기시간이 있다 0으로 주고다 4ms이상 걸릴수 가 있다는거



let num = 0
function showTime(){
    console.log(`안녕하세요. 접속한지 ${num++}초가 지났습니다`)
}
setInterVel(showTime, 1000)  1초에 한번씩 메ㅔㅅ지가 나온다

let num = 0
function showTime(){
    console.log(`안녕하세요. 접속한지 ${num++}초가 지났습니다`)
    if(num>5){
        clearInterVel(tId)
    }
}
let tId = setInterVel(showTime, 1000)


js에서는 일반적인 방법외에도 함수를 어디서 어떻게 호출했냐 관걔없이 this가 무엇인지 지정할수 있다
함수호출방법과 관꺠없이 this를 지정할수 있음
call매서는 모든 함수에서 사용할수 있으며 this를 특정값으로 지정할수 있다
const mike = {
    neme:'mike'
}
const tom = {
    name: 'tom'
}

function showThisName(){
    console.log(this.name)
}
showThisName()       아무것도 안뜬다 여기서 this는 window를 가르키기 때누에 
showThisName.call(mike)   mike

const mike = {
    neme:'mike'
}
const tom = {
    name: 'tom'
}

function showThisName(){
    console.log(this.name)
}
function update(birthday, occupation){
    this.birthYear = birthYear 
    this.occupation = occupation 
}
update.call(mike, 1999, 'singer')   this로 사용할mike를 전달하고. 첫번쨰 매개변수는 this가 사용할값. 두번째 부터는 함수가 사용할 매개변수 
console.log(mike)  마이크에 생년과 직업이 들어감

apply는 함수 매견수를 처리할 방법을 제외하면 call과 동일하다
call은 일반적인 함수와 마찬가지로 매개변수를 직접받지만 apply는 매개변수를 배열로 받는다
update.call(mike, [1999, singer])

apply는 배열요소를 함수 매개변수로 사용할때 유용


const minMax = Math.min([3, 10, 1, 6, 4])
console.log(minMax)   NaN

const num = [3, 10, 1, 6, 4]
const minMax = Math.min(...num)
 

apply는 두번쨰 매개변수로 배열을 전달하면 그요소들을 차례대로 인수로 사용한다 
const num = [3, 10, 1, 6, 4]
const minMax = Math.min.apply(null, num)    null은 this잘ㄴ데 Math에는 딱히 필요하지 않아서 nullㄶ음
Math.min.apply(null, [3, 10, 1, 6, 4]) 이렇게 받는거고
cosnt minMax = Math.min.call(null, ...num)
Math.min.call(null, 3, 10,1 ,6, 4)

this값을 바꿀수 있는 마지막 함수는 bind
함수의 this값을 영구히 바꿀수 있다

const mike = {
    neme:'mike'
}
function update(birthday, occupation){
    this.birthYear = birthYear 
    this.occupation = occupation 
}
const updateMike = update.bind(mike)
updateMike(1980, 'police')
console.log(mike)


const user = {
    name: 'mike'
    showName: function(){
        console.log(`hello ${this.name}`)
    }
}
user.showName()              매써드는 .앞에 있는게 this다  뭔소리지
let fn = user.showName 
fn()       hello만 나온는데 fn을 할당할떄 this를 잃어버린거임
이럴떄
fn.call(user)     call를 사용해서 this로 사용할값 user을 넣어줌    hello mike 
fn.apply(user)     동일
let boundFn = fn.bind(user) 
boundFn()    hello mike




const user = {
    name: mike 
}
user.hasOwnProperty('name')   true 자기가 프로펄티를 가지고 있는지 확인하는 매서드
user.hasOwnProperty('age')    flase
hasOwnProperty는 만든적이 없는데 어디에 있을까 -proto-에 있음
객체에있으면 탐색을 멈추고 없으면 프로토에서 차즌ㄴ다
const car = {
    wheels: 4
    drice(){
        console.log(deive..)
    }
} 
const bmw = {
    color: red,
    navigation: 1
}
const benz= {
    color: block
}
bmw._proto_ = car     car가 bmw의 프로토가 되는거다
다르게 말하면 bmw는 car의 상속을 받는다
bmw.wheels
4         가나온다 
상속은 계속 이어질수 있다
const x5 = {
    color: wheels,
    name: x5 
}
x5._proto_=bmw 
x5에 없으면 bmw에서 찾고 없으면 car을 찾는다. 있으면 멈춘다
이런걸 prototype chain
for in 하면 다나오는다
Object.key 
나 velues는 안나온다. 본인이 가지고 있는것만 나오고 proto는 안나오
만약 구분하고 싶으면 
for(p in x5){
    if(x5.hasOwnProperty(p)){
        console.log('o', p)
    }
}else {
    console.log('x', p)
}

생상자함수 이용
const car = {
    wheels: 4
    drice(){
        console.log(deive..)
    }
} 
const Bmw = function(color){
    this.color = color
}
const x5 = new Bmw('red')
x5.__proto__=car

더 간편하게 생산자하무는 간편히 사용할력 하는거닌깐
const Bmw = function(color){
    this.color = color
}
Bmw.prototype.wheels=4
Bmw.prototype.dreive= function(){
    console.log('drive..')
}
const x5 = new Bmw('red')
프로토타입을 이용하면 중복코드를 줄일수 있따

생성자함수가 새로운 객체를 만들어 낼떄 그 객체는 생성자의 인스턴라고 불린다 . 이걸편리하게 확인할수있는 instansof연산자가 ㅇㅆ때
이걸 이용해서 객체와 생성자를 비교할수 있고 이는 해당객체가 그 생성자로 부터 생산된것인지 를 판단해서
트로 혹은 폴스를 반환한다
x5 instanceOf bmw     true    x5는 bmw로 생생됬죠    x5는 bmw의 인스턴스 
이렇게하면 bmw를 이용해서 x5를 만들었는지 알려준다
x5.constructor===bmw  true     콘스트럭철은 생성자 bmw를 가르킨다

코들르 좀더 깔끔하게 하면
bmw.prototype = {
    wheels: 4,
    drive(){
        conseol.log('drieve...')
    },
    navigation: 1,
    conseol.glo('stop')
}
const x5 = new Bmw('red')  근데 이렇게 하면 콘스트럭터가 사라짐
x5.constructor === Bmw    flase
이런현상을 방지하기 위해서 프로토타입을 덮어쓰지 말고 하나씩 추가하는게 좋다

bmw.prototype = {
    constructor: Bmw,              아니면 이렇게 수동으로 명시해줘도 괯낞다   이러면 true나옴
    wheels: 4,
    drive(){
        conseol.log('drieve...')
    },
    navigation: 1,
    conseol.glo('stop')
}
이렇게js는 명확한 콘스트럭터를 보장하지 안흔ㄴ다
개발자에 의해서 언제든지 수정될수 있다 

const Bmw = function(color){
    this.color = color
}
const x5 = new Bmw('red')
x5.color='block' 아무나 색갈을 바꾸면 안되겠죠
이렇대 클로저 이용

const Bmw = function(color){
    this.color = color
    this.getColor=funciton(){
        console.log(c)
    }
}
const x5 = new Bmw('red')
이러면 못 바꿈
이렇게 컬러함수는 생성될 당시의 컨텍스들을 기억하는거
1 42 55
