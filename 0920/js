배열을 합쳐서 문자열을 만들려면 join
let arr = ['안녕', '나는', '철수야']
let result = arr.join()
console.log(result)    안녕, 나는, 철수야 이렇게 나오는데 join(' ')공백을 넣으면 안녕 나는 철수야 나옴.(-)특수문자도 가능



let arr = '안녕, 나는, 철수야'
let result = arr.split(',')
console.log(result)     ['안녕', '나는', '철수야']     ,을 기준으로 문자열을 배열로 만들어줌

let str = 'hello, my name is mike'
let result = atr.split('')       이렇게 빈 무자열로 자르면 
console.log(result)                 ['h', 'e', 'l', 'l', 'o', ',', ' ',  ..] 하나하나 나옴



배열인지 아닌지 확인하려면 
자바스크립트 에서 배열은 객체형이라 typeof는 객체라고 알려준다
console.log(Array.isArray(user))    true false 나옴

.sort()
배열 재정렬
배열자체가 변경된다
let arr = [1, 5, 4, 2, 3] 
arr.sort()
console.log(arr)      [1, 2, 3, 4, 5]    문자열도 순서대로 정렬

let arr = [27, 8, 5, 13]  
arr.sort() 
console.log(arr)     [13 ,27, 5 ,8]     정렬할떄 요소를 문자열로 취급하기 때문. 1로 시작하는 13이 젤먼저 오게 되너ㅡㄴ거

.sort(fn)  함수를 인자로 받는다
let arr = [27, 8, 5, 13]  
arr.sort((a, b)->{
    return a - b               음 뭐라는지 모르겠다. 27과 8비교해서 작은게 앞으로 간다는데
}) 
console.log(arr)       [5, 8, 13, 27]


let arr = [1, 2, 3, 4, 5]
let result = 0
arr.forEach((num) => {
    result += num
})
console.log(result)    15 다 더하기

다른바법
let arr = [1, 2, 3, 4, 5]
const result = arr.reduce((prev, cur) =>{        prev누적값   cur현재값     
    return prev + cur   
}, 0)                 초기값은0. 안쓰면 첫번째 요소 1이 들어감



map이나 filter 대신에 reduce써서 배열반환
let userList =[
    {name: 'mike', age: 30},
    {name: 'tom', age: 10},
    {name: 'jane', age: 27}
]
let result = userList.reduce((prev, cur) => {
    if(cur.age > 19){
        prev.push(cur.name)
    }
    return prev
}, [])

console.log(result)        ['mike', 'jane']



let userList =[
    {name: 'mike', age: 30},
    {name: 'tom', age: 10},
    {name: 'jane', age: 27}
]
let result = userList.reduce((prev, cur) => {
    if(cur.name.length === 3){
        prev.push(cur.name)
    }
    return prev
}, [])

console.log(result)        ['tom']


.reduceRight()    reduce랑 동일한데 다만 배열 우측부터 연산을 실행



그조분해 할당
배열이나 객체의 속성을 분해해서 그값을 변수에 담을수 있게 하는 표현식
let [x, y] = [1, 2] 
let users = [1, 2, 3] 
let [a, b, c] = users

let str = 'mike-tom-jane'
let [user1, user2, user3] = str.split('-')
console.log(user1)      mike

let [a, b, c] = [1, 2]     c는 언디파인드
let [a=3, b=1, c=4] = [1, 2]      기본값 줘서 언디파인드면 기본값 으로

let [user1, , user2] = ['mike', 'tom', 'jane', 'tony']


바궈치기
let a = 1
let b = 2
a =b 하면 a값은 없어 지닌깐
let a = 1
let b = 2
let c = a 
a =b     2
b=c      1
이럴때 구조분해 할당은 펴닐
[a, b] = [b, a] 


객체구조분해
let user = {name: 'mike', age: 30}
let {name, age} = user 
위 코드는 밑에 코드랑 같다
let name = user.name 
let age = user.age 
console.log(name)     'mike' 
console.log(age)     30
배열그조분해랑 다른점은 순서 상관안해도 됨
let user = {name: 'mike', age: 30}
let {age, name} = user    해도 같다

새로운 변수 이름으로 할당
let user = {name: 'mike', age: 30}
let {name: userName, age: userAge} = uesr 
console.log(userName)    'mike'
console.log(userAge)     30


기본값
let user = {name: 'mike', age: 30}
let {name, age, gender} = user      gender은 언디파인드 
let {name, age, gender: 'male'} = user 


나머지 매개변수, 전개구문
function showName(name){
    console.log(name)
}

showName('mike', 'tom')   애러는 발생하지 안흔다 'mike'만 찍힌다 

함수에 인수를 얻는 방법은 2가지
arguments 
나머지 매개변수  
옛날에는 argument를 썻지만 
지금은 나머지 매개변수를 쓴다 호살표함수에는 arguments가 없다

arguments
함수로 넘어온 모든 인수에 접근
함수내에서 이용 가능한 지역변수 
length/ index       배열같지만 아니다 
array형태의 객체      array형태의 개게는 length와 index속성 가지고 있지만 배열의 내장메서드는 가지고 있지 않다그래서 forEach 나 map 사요불가

function showName(name){
    console.log(arguments.length)     2
    console.log(arguments.[0])         'mike'
    console.log(arguments.[1])             'tom'
}

showName('mike', 'tom')
es6를 사용할수 이쓴 환경이면 나머지 매게변수 사용 권장



나머지매개변수는 정해지지않는 갯수의 인수를 배열로 나타냄
function showName(...names){      ...를 찌고 배열이름을 정해준다. 그러면 names배열안에 전달된 인수들이 들어간다
    console.log(names)
}
showName()       []    아무것도 전달하지 않으면 언디파인드가 아니라 빈배열이 나타남
showName('mike')    ['mike'] 
showName('mike', 'tom')      ['mike', 'tom']

전달받는 모든수를 더해야한다면
function add(...numvers){
    let result = 0
    numbers.forEach((num) => result+=num))
    console.log(result)
}
add(1, 2)
add(1, 2, 3, 4, 5, 6)


function add(...numvers){
    let result = numbers.reduce((prev, cur) => prev + cur))
    console.log(result)
}

1 11 55
