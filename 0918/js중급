백준 10430
let input = [5, 8, 4]
const [A, B, C] = input             음 이렇게 배열로 넣으면 알아서 들어가네
console.log((A + B)%C)

Math.floor() : 소수점 이하를 버림한다.
Math.ceil() : 소수점 이하를 올림한다.
Math.round() : 소수점 이하를 반올림한다.



생상자 함수 상품객체 생성
function Item(title, price){
    this.title= title;
    this.price= price;
    this,shiwPrie = function (){
        console.log(`가격은 ${price}원 입니다`)
    }

}

const item1 = new Item('인형', 3000)
const item2 = new Item('가방', 4000)      여기서 new를 안붙이면 undifined가 나온다.아무것도 호출해주는게 없기 때문에
const item3 = new Item('지갑', 9000)

console.log(item1, item2, itme3)
item3.showPrie()
비슷한 객체를 여러개 만들때 생상자 함수 씀



computed property
let a = 'age'
const user ={
    name : 'mike'
    age : 30
}
이걸

computed property 계산된 프로펄티
let a = 'age'
const user ={
    name : 'mike',
    [a] : 30
}  대괄호를 묶어주면 a라는 문자열이 아니라 변수에 할당된 값이 들어간다

const user = {
    [1 + 4] : 5,                      이렇게 식자체를 넣는것도 가능
    ['안녕'+ '하세여'] : 'hello'
}
하면
user{5:5, 안녕하세여:'hello'}   나옴



객체에 사용하는 method
const user = {
    name: 'mike',
    age : 30
}
const clonUser = user; 복제안됨 저 user에는 객체 자체가 들어가 있는게 아니라 객체에 대한 메모리 주소인 객체에 대힌 참조값이 저장되어 있따
클론 유저에 객체가 들어가는게 아니라 참조값만 들어가게 된다 
비슷한 상황으로 clonUser.name = 'tom'으로 바꿨는데 user의 name도 'tom'으로 바뀌는. 하나의 객체를 두변수가 접근하고 있는거

동일하게 복제 하려면 Object.assign() 객체 복제를 사용
const newUser = Object.assign({}, user)    여기서빈객체는 초기값. 두번쟤 매개변수로 들어온 값들이 초기변수에 병합된다
{}+ {name: 'mike', age: 30} 이렇게 하면 빈객체에 user값이 들어 가무로 복제된다
newUser.name='tom'       이름을 바꿔도 변함이 없다
console.log(user.name)   mike뜬다.     newUser != user 같은 객체가 아니다
Object.assign({gener: 'male'}, user)  이렇게 하면 성별값만 있는 객체가 user을 병합하는거고 
{gener: 'male',
name: 'mike',
age: 30           총 3개의 프로펄티를 가지게 된다
}
만약 병합을 하는데 key가 같다면 덮어쓴다
Object.assign(name: 'tom', user)
{name: mike, age: 30}

const user = {
    name : 'mike'
}
const inpo1 = {
    age : 37
}
const inpo2 = {
    gender : 'male'
}
Object.assign(user, inop1, inpo2) 2개이상의 객체를 합칠수도 있다,다 user에 들어감

Object.keys()   키배열 반환
const user = {
    name: 'mike',
    age : 30
}
Object.keys(user)    [name, age] 배열로 반환
Object.values(user)   ['mike', 30] 값들을 배열로 반환
Object.entries(user)   [[name:'mike'], [age:30]] 키와 값을 상으로 묶어서 배열로 반환
반대로 배열들을 객체로
const arr = [
    [name: 'mike'],
    [age: 30]
]   
Object.fromEntries(arr)         
{
    name: 'mike',
    age: 30                    이렇게 나옴
}

function makeObj(key, vel){
    return{
        [key]: val
    }
}
const obj = makeObj('나이', 33)
console.log(obj)                    {나이: 33}
어떤게 key될지 모를때 유용

이제까지 property key는 문자형이었음
const obj = {
    1: '1입니다',
    false: '거짓'
}
Object.keys(obj)        ['1', 'false']
그래서 접근 할떄도
obj['1']    1입니다
obj['false']     거짓
이렇게 문자형으로 접근 가능

symbol도 문자형
const a = Symbol()  new를 붙이지 않는다. 유일한 식별자를 만들때 symbol사용
const b = Symbol()
console.log(a)  Symbol()이래나오고
console.log(b)   
a === b   false
a == b   false 나온다
유일성 보장 전체 코드중에 딱하나
const id = Symbol('id')    심볼을 만들떄 설명을 붙여 줄수있따 설명을 붙여주면 디버깅 할때 편하다
문자형을 붙여주면 되는데  이 문자형은 심볼생성할때 어떠한 영향도 주지 않는다

property key 심볼형
const id = Symbol('id')
const user = {
    name: 'mike',
    age: 30,
    [id]: 'myid'
}
{name: 'mike', age: 30, Symbol('id'): 'myid'}  

Object.keys(user)    ['name', 'age'] 
Object.values(user)   ['mike', '30', 'myid']   
Object.entries(user)    [Array1, Array2 ]
for(let a in user){}          이런것들은 키가 심볼형인 프로펄티는 건너 띈다

심볼은 어디 쓰냐면 틍적객체에 원본데이터는 건들이지 않고 속성추가할수
const user = {
    name: 'mike',
    age: 30
}
const id = Symbol('id')
user[id] = 'myid'
user.name = 'myname' 이게  user에 추가되면 덮어쓰자나 심볼쓰면 덮어 쓰지 않고 만들수 있따

심볼은 이름이 같더라도 모두 다른존재. 가끔 전역변수처럼 이름이 같으면 같은 객체를 가르켜야 할때 
사영할숭 있는게 Symbol.for()
하나의 심볼만 보장받을수 있음
없으면 만들고 있으면 가져오기 때문
심볼함수는 매번 다른 심볼값을 생성하지만 
심볼포 매서드는 하나를 생성한뒤 키를 통해 같은 심볼 공유가능
const id1 = Symbol.for('id')
const id2 = Symbol.for('id')
id1 === id2  true 
이걸 전역심볼이라 부르고 코드어디에서든 사용할수
이름을 얻고 싶으면 Symbol.keyfor(id1))을 이용하면 됨 id나옴

전역심볼이 아닌 심볼은 키포를 사용할수 없다
const id = Symbol('id')
id.description     id      대신이걸로 저 이름을 알수 있다

심볼을 완전히 숨길수 있는 방법은 없다
const id = Symbol('id')
const user = {
    name: 'mike',
    age: 30
    [id] : 'myid'
}
Object.getOwnPropertySymbol(user)       [Symbol(id)]   이걸 사용하면 심볼들만 볼수 있다
Reflect.ownKeys(user)    심블형키들뿐만 아니라 객체의 모든 키들을 볼수 있다   ['name', 'age', Symbol(id)]
하지만 대부분의 라이브러리 내장함수등은 이런 매서들을 사용하지 않는다 
그러니까 걱정하지 말고 유일한 프퍼퍼티를 추가하고 싶을때 심볼을 사용해라


//다른개발자가 만들어 놓은 객체
const user ={
    name: 'mike',
    age: 30
}




//사용자가 접속하면 보는 객체
for(let key in user){
    console.log(`his ${key} is ${user[key]}.`) 
}
하면 his name is mike.
his age is 30이 뜨는데 여기에

//다른개발자가 만들어 놓은 객체
const user ={
    name: 'mike',
    age: 30
}

//내가 추가한 객체
user.showName = function(){}             이렇게하면 his showName is function(){}도뜬다

//사용자가 접속하면 보는 객체
for(let key in user){
    console.log(`his ${key} is ${user[key]}.`) 
}
his name is mike.
his age is 30
이렇게하면 his showName is function(){}도뜬다

//내가 추가한 객체
user.showName = function(){}  안쓰고
이걸쓰면 
const showName = Symbol('show name')
user[showName] = function(){}
console.log(this.name)  

his name is mike.
his age is 30   만 뜬다

저걸 호출할라면
const showName = Symbol('show name')
user[showName] = function(){}
console.log(this.name)  
밑에
user[showName]()  하면 mike 나온다



우리가 일상에서 사용하고 있는건 10진수
개발을 하다보면 2진수나 16진수 사용
num.toString()    숫자를문자로 바꿔준다
num.toString(2)   괄호안에 숫자를 쓰면 진법으로 바뀐다

Math.PI      3.1415926535
Math.ceil()   올림
Math.floor()   내림
Mat.round()    반올림

소수점 자릿수
2째자리 까지
Math.around(user*100)/100          100을 곱하고 반올림 한뒤 100을 나누면 됨
다른방법
user.toFixed(2)     소수2쨰까지
30.1234에서
user.toFixed(0)    '30'
user.toFixed(6)     '30.123400'
통계나 지표작업할때 많이 쓰임
중요한 점은 toFixed는 문자열을 반환
Number(user.toFixed) 그래서 넘버로 전환


isNaN()
let x = Number('x')     NaN
x == NaN    flase
x === NaN   false
NaN == NaN   false   NaN은 자기자신도 똑같지 않다고 판단
isNan만이 NaN인지 아닌지 판단
isNaN(x)    true
isNaN(3)    false


parseint()
let margin = '10px'
parseInt(margin)    10px나오는데?    파스인트는 문자가 혼용되어 있어도 동작.읽을수 있는데까지 읽고 문자를 만나면 숫자로 반환
Number(margin)  NaN

let a = 'f3'
parseInt(a)   NaN    숫자로 시작하지 않으면 NaN뜬다
파스인트는 2번쨰 인수를 받아서 진수를 지정할수 있따
let a = 'f3'
parseInt(a, 16)   243    2번쨰 인수에 16을 전달해서 16진수로 바꿈
parseInt('11', 2)     3    11을 숫자로 바꾸고 2진수에서 10진수로 손쉽게 바꿀수 있다.


parseFloat()
lat a = '18.5%'
parseFolat(a)     소수점을 반환   18.5
parseInt는 소수점 이하는 무시하고 정수만 반환



Math.random()          랜덤숫자 생성
0~1사이 무작위 숫자 생성           0~1인데 0.214124124이런거 나옴
1~100까지 임위의 숫자를 뽑고 싶으면
Math.floor(Math.random()*100)+1         여기서 100을 곱하면 숫자 100개를 뽑는다는 말임. 뭔말이지
1을 더하는 이유는 0이 나올수 있어서


Math.max(1, 4, -1, 5, 10)   10
Math.min(1, 4, -1, 5, 10)  -1


Math.aba(-1)   1    절댓값
Math.pow(2, 10)     1024       2의 제곱

Math.sqrt(16) 4     제곱근




문자열
``은 여러줄 가능
let dec = 'sdfsdfsdfsdfsdf\n날ㅆ;sfsdfds'      ''을쓸꺼면 \n한줄띄우는거 써야 여러줄 가능
저거없이 하면 애러 남
let desc = '안녕하세요'
desc.length      6나옴

특정위치접근
desc[2]    하  
desc[4] = '용'    배열과 다르게 1글자만 바꾸는 건 안됨
console.log(desc)      안녕하세요

a.toUpperCase()  모든문자대문자로
a.toLowerCase()  모든문자소문자로 바꿔준다 

a.indexOf('to')   문자가 몇번째인지. 찾는게 없으면 -1반환
찾는게 여러개라도 첫번쨰 반환   
if(a.indexOf('hi')>-1){      hi가 첫번째로 어면 0이면 false기 때문에 -1보다 큰가로 

}
.slice(n, m)     n부터 m까지 반환.  m은 없으면 문자열 끝갖;   양수면 그숫자까지 (자기는 포함하지 않음)
음수면 끝에서 부터 셈
let a = 'abcdefg'
a.slice(2)   cdefg
a.slice(0, 5)     abcde
a.slice(2, -2)     bcde

a.substring(2, 5)    cde
a.substring(5, 2)    cde     음수는 0으로 인식 n 과 m 사이

a.substr(2, 4)
a.substr(-4, 2)    n부터시작 m개를 가져와라

a.stim()    앞뒤 공백제거
a.repeat(3)    문자열을 n번반복


문자열 비겨
a  <  c   true   
'a'.codePointAt(0)     십진법 알수있음   
String.condePointAt(97)     a
알바벳은 a보다 z가 크디ㅏ   대문자보다 소문자가 크다

숫자만 빼고 뒤에 문자들 찍는법
let list = [
    '01. 들어가며',
    '02. js의 역사',
    '03. 자료형',
    '04, 함수',
    '05. 배열'
]
let newList = []
for(let i = 0; i < list.length; i++){
    newList.push(list[i].slice(4))
}
console.log(newList)     ['들어가며', 'js의 역사', '자료형', '함수', '배열']


function hasCola(str){
    if(str.indexOf('콜라') > -1){
        console.log('금칙어가 있습니다')
    }else {
        console.log('통과')
    }
}

hasCola('사이다가 짱이야')
hasCola('콜라가 짱이지')
hasCola('콜라')





function hasCola(str){
    if(str.includes('콜라') > -1){
        console.log('금칙어가 있습니다')
    }else {
        console.log('통과')
    }
}

hasCola('사이다가 짱이야')
hasCola('콜라가 짱이지')
hasCola('콜라')
4002
