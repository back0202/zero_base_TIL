순열구하기
function solution(m, arr){         
    let answer=[];
    n=arr.length;
    let ch=Array.from({length:n}, ()=>0);
    let tmp=Array.from({length:m}, ()=>0);;
    function DFS(L){
        if(L===m){
            answer.push(tmp.slice()); 
        }
        else{
            for(let i=0; i<n; i++){
                if(ch[i]===0){
                    ch[i]=1;
                    tmp[L]=arr[i];
                    DFS(L+1);
                    ch[i]=0;
                }
            }
        }
    }
    DFS(0);
    return answer;
}

let arr=[3, 6, 9];
console.log(solution(2, arr));


function solution(m, arr){         
    let answer=[];
    n=arr.length;
    let ch=Array.from({length:n}, ()=>0);
    let tmp=[];
    function DFS(L){
        if(L===m){
            answer.push(tmp.slice()); 
        }
        else{
            for(let i=0; i<n; i++){
                if(ch[i]===0){
                    ch[i]=1;
                    tmp.push(arr[i]);
                    DFS(L+1);
                    ch[i]=0;
                    tmp.pop();
                }
            }
        }
    }
    DFS(0);
    return answer;
}

let arr=[3, 6, 9];
console.log(solution(2, arr));



팩토리얼
function solution(n){         
    let answer;
    function DFS(n){
        if(n===1) return 1;
        else return n*DFS(n-1); 
    }
    answer=DFS(n);
    return answer;
}

console.log(solution(5));



메모제이션
function solution(n, r){         
    let answer=[];
    let dy= Array.from(Array(35), () => Array(35).fill(0));
    
    function DFS(n, r){
        if(dy[n][r]>0) return dy[n][r];
        if(n===r || r===0) return 1;
        else return dy[n][r]=DFS(n-1, r-1)+DFS(n-1, r);
    }
    answer=DFS(n, r);
    return answer;
}

console.log(solution(5, 3));



수열추출하기
function solution(n, f){         
    let answer, flag=0;
    let dy= Array.from(Array(11), () => Array(11).fill(0));
    let ch=Array.from({length:n+1}, ()=>0);
    let p=Array.from({length:n}, ()=>0);
    let b=Array.from({length:n}, ()=>0);
    function combi(n, r){
        if(dy[n][r]>0) return dy[n][r];
        if(n===r || r===0) return 1;
        else return dy[n][r]=combi(n-1, r-1)+combi(n-1, r);
    }
    function DFS(L, sum){
        if(flag) return;
        if(L===n && sum===f){
            answer=p.slice();
            flag=1;
        }
        else{
            for(let i=1; i<=n; i++){
                if(ch[i]===0){
                    ch[i]=1;
                    p[L]=i;
                    DFS(L+1, sum+(b[L]*p[L]));
                    ch[i]=0;
                }
            }
        }
    }
    for(let i=0; i<n; i++){
        b[i]=combi(n-1, i);
    }
    DFS(0, 0);
    return answer;
}

console.log(solution(4, 16));




조합구하기
function solution(n, m){         
    let answer=[];
    let tmp=Array.from({length:m}, ()=>0);;
    function DFS(L, s){
        if(L===m){
            answer.push(tmp.slice()); 
        }
        else{
            for(let i=s; i<=n; i++){
                tmp[L]=i;
                DFS(L+1, i+1);
            }
        }
    }
    DFS(0, 1);
    return answer;
}

console.log(solution(4, 2));



수들의 조합
function solution(n, k, arr, m){         
    let answer=0;
    function DFS(L, s, sum){
       if(L===k){
            if(sum%m===0) answer++;
       }
       else{
           for(let i=s; i<n; i++){
               DFS(L+1, i+1, sum+arr[i]);
           }
       }
    }

    DFS(0, 0, 0);
    return answer;
}

let arr=[2, 4, 5, 8, 12];
console.log(solution(5, 3, arr, 6));



경로탐샘
function solution(n, arr){  
    let answer=0;
    let graph=Array.from(Array(n+1), ()=>Array(n+1).fill(0));
    let ch=Array.from({length:n+1}, ()=>0);
    path=[];
    for(let [a, b] of arr){
        graph[a][b]=1;
    }
    function DFS(v){
        if(v===n){
            answer++;
            console.log(path);
        }
        else{
            for(let i=1; i<=n; i++){
                if(graph[v][i]===1 && ch[i]===0){
                    ch[i]=1;
                    path.push(i);
                    DFS(i);
                    ch[i]=0;
                    path.pop();
                }
            }
        }
    }

    path.push(1);
    ch[1]=1;
    DFS(1);
    return answer;
}

let arr=[[1, 2], [1, 3], [1, 4], [2, 1], [2, 3], [2, 5], [3, 4], [4, 2], [4, 5]];
console.log(solution(5, arr));



정점이 많아지면 인접리스트로







중복순열할때 재귀쓰고 FOR문안쓰는 이유는 4개중에 2개뽑으라면 2중포문, 3개뽁으라면 3중포문 이렇게 for문이 늘어나기 떄문이다
코드 수정이 쉽다 재귀가. 
